#!/usr/bin/env python3

import argparse
import os
import re
import shutil
import zipfile

TMPDIR = 'tmpdir'


def _arguments():
    parser = argparse.ArgumentParser(
        description='CLI tool to clean atlassian support.zip from various data',
    )
    parser.add_argument(
        'supportzip',
        help='Path to support zip file to be cleaned',
    )
    parser.add_argument(
        'baseurl',
        help='Base-URL of the corresponding system',
    )
    parser.add_argument(
        '--debug', '-d',
        action='store_true',
        help='activate debug log level',
    )
    return parser.parse_args()


def _prepare():
    shutil.rmtree(TMPDIR)
    os.remove('cleaned.zip')
    os.mkdir(TMPDIR)


def _extract_zip(supportzip):
    supportzip = zipfile.ZipFile(supportzip, 'r')
    supportzip.extractall(TMPDIR)
    supportzip.close()


def _replace_pattern_in_logs(pattern: str, replacement: str):
    applogfiles = os.listdir(f'{TMPDIR}/application-logs/')
    for logfile in applogfiles:
        with open(f'{TMPDIR}/application-logs/{logfile}', 'r') as file:
            logcontent = file.read()
            logcontent, nr = re.subn(pattern=re.compile(pattern), repl=replacement, string=logcontent)
            print(f'{nr} replacements ({replacement}) in {logfile}')
        with open(f'{TMPDIR}/application-logs/{logfile}', 'w+') as file:
            file.write(logcontent)


def _create_cleaned_zip():
    with zipfile.ZipFile('cleaned.zip', 'w', zipfile.ZIP_DEFLATED) as cleanedzip:
        _zipdir(TMPDIR, cleanedzip)


def _zipdir(path, ziph):
    # ziph is zipfile handle
    for root, dirs, files in os.walk(path):
        for file in files:
            filepath = os.path.join(root, file)
            ziph.write(filename=filepath, arcname=filepath[len(path):])


def _cleanup():
    pass


if __name__ == '__main__':
    args = _arguments()

    print('---')
    print('CLI tool to clean atlassian support.zip from various data')
    print('---')

    try:
        _prepare()
    except:
        pass

    print('Extract support zip')
    _extract_zip(supportzip=args.supportzip)

    print('Clear unwanted information:')
    _replace_pattern_in_logs(pattern=re.escape(args.baseurl), replacement='URL_CLEANED')  # Clean URL
    _replace_pattern_in_logs(pattern='userName: \\S*', replacement='userName: USERNAME_CLEANED')  # Clean user names

    print('Create cleaned.zip')
    _create_cleaned_zip()

    _cleanup()
